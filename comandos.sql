CREATE TABLE Categoria (
    id_categoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL
);


CREATE TABLE Imagen (
    id_imagen NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    url VARCHAR2(500) NOT NULL
);

CREATE TABLE Producto (
    id_producto NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_categoria NUMBER NOT NULL,
    id_imagen NUMBER NOT NULL UNIQUE,
    nombre VARCHAR2(150) NOT NULL,
    cantidad NUMBER NOT NULL,
    precio NUMBER(10,2) NOT NULL,
    CONSTRAINT fk_producto_categoria FOREIGN KEY (id_categoria)
        REFERENCES Categoria(id_categoria),
    CONSTRAINT fk_producto_imagen FOREIGN KEY (id_imagen)
        REFERENCES Imagen(id_imagen)
);

CREATE TABLE Usuario (
    email VARCHAR2(150) PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    contrasena VARCHAR2(200) NOT NULL
);

CREATE TABLE Detalle_Compra (
    id_compra NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_producto NUMBER NOT NULL,
    id_usuario VARCHAR2(150) NOT NULL,
    fecha DATE DEFAULT SYSDATE,
    CONSTRAINT fk_detalle_producto FOREIGN KEY (id_producto)
        REFERENCES Producto(id_producto),
    CONSTRAINT fk_detalle_usuario FOREIGN KEY (id_usuario)
        REFERENCES Usuario(email)
);

INSERT INTO Categoria (nombre) VALUES ('Collar');
INSERT INTO Categoria (nombre) VALUES ('Pulsera');
INSERT INTO Categoria (nombre) VALUES ('Anillo');
INSERT INTO Categoria (nombre) VALUES ('Aretes');
INSERT INTO Categoria (nombre) VALUES ('Dije');
INSERT INTO Categoria (nombre) VALUES ('Tobillera');
INSERT INTO Categoria (nombre) VALUES ('Broche');
INSERT INTO Categoria (nombre) VALUES ('Conjunto de joyería');
INSERT INTO Categoria (nombre) VALUES ('Reloj');
INSERT INTO Categoria (nombre) VALUES ('Accesorio para Cabello');

INSERT INTO Usuario (email, nombre, contrasena) VALUES ('ana@example.com', 'Ana Gómez', 'pwd123');
INSERT INTO Usuario (email, nombre, contrasena) VALUES ('carlos@example.com', 'Carlos Pérez', 'pwd123', 'Cartago, Costa Rica');
INSERT INTO Usuario (email, nombre, contrasena) VALUES ('maria@example.com', 'María Rodríguez', 'pwd123', 'Heredia, Costa Rica');
INSERT INTO Usuario (email, nombre, contrasena) VALUES ('jorge@example.com', 'Jorge López', 'pwd123', 'Alajuela, Costa Rica');
INSERT INTO Usuario (email, nombre, contrasena) VALUES ('sofia@example.com', 'Sofía Jiménez', 'pwd123', 'Limón, Costa Rica');
INSERT INTO Usuario (email, nombre, contrasena) VALUES ('pedro@example.com', 'Pedro Ramírez', 'pwd123', 'Puntarenas, Costa Rica');
INSERT INTO Usuario (email, nombre, contrasena) VALUES ('lucia@example.com', 'Lucía Vargas', 'pwd123', 'San José, Costa Rica');
INSERT INTO Usuario (email, nombre, contrasena) VALUES ('andres@example.com', 'Andrés Salazar', 'pwd123', 'Cartago, Costa Rica');
INSERT INTO Usuario (email, nombre, contrasena) VALUES ('valeria@example.com', 'Valeria Castillo', 'pwd123');
INSERT INTO Usuario (email, nombre, contrasena) VALUES ('diego@example.com', 'Diego Solís', 'pwd123');

INSERT INTO Imagen (url) VALUES ('https://example.com/img/collar_perlas1.jpg');   -- id 1
INSERT INTO Imagen (url) VALUES ('https://example.com/img/collar_dorado1.jpg');   -- id 2
INSERT INTO Imagen (url) VALUES ('https://example.com/img/pulsera_cuero1.jpg');   -- id 3
INSERT INTO Imagen (url) VALUES ('https://example.com/img/pulsera_plata1.jpg');   -- id 4
INSERT INTO Imagen (url) VALUES ('https://example.com/img/anillo1.jpg');          -- id 5
INSERT INTO Imagen (url) VALUES ('https://example.com/img/aretes1.jpg');          -- id 6
INSERT INTO Imagen (url) VALUES ('https://example.com/img/dije1.jpg');            -- id 7
INSERT INTO Imagen (url) VALUES ('https://example.com/img/tobillera1.jpg');       -- id 8
INSERT INTO Imagen (url) VALUES ('https://example.com/img/reloj1.jpg');           -- id 9
INSERT INTO Imagen (url) VALUES ('https://example.com/img/cinta1.jpg');           -- id 10

INSERT INTO Producto (id_categoria, id_imagen, nombre, cantidad, precio)
VALUES (1, 1, 'Collar de perlas', 15, 25000);
INSERT INTO Producto (id_categoria, id_imagen, nombre, cantidad, precio)
VALUES (1, 2, 'Collar dorado minimalista', 20, 18000);
INSERT INTO Producto (id_categoria, id_imagen, nombre, cantidad, precio)
VALUES (2, 3, 'Pulsera de cuero trenzado', 25, 12000);
INSERT INTO Producto (id_categoria, id_imagen, nombre, cantidad, precio)
VALUES (2, 4, 'Pulsera de plata con dije', 10, 22000);
INSERT INTO Producto (id_categoria, id_imagen, nombre, cantidad, precio)
VALUES (3, 5, 'Anillo de compromiso zirconia', 12, 55000);
INSERT INTO Producto (id_categoria, id_imagen, nombre, cantidad, precio)
VALUES (4, 6, 'Aretes de oro blanco', 18, 32000);
INSERT INTO Producto (id_categoria, id_imagen, nombre, cantidad, precio)
VALUES (5, 7, 'Dije corazón cristal', 30, 9000);
INSERT INTO Producto (id_categoria, id_imagen, nombre, cantidad, precio)
VALUES (6, 8, 'Tobillera con conchas marinas', 20, 7000);
INSERT INTO Producto (id_categoria, id_imagen, nombre, cantidad, precio)
VALUES (9, 9, 'Reloj unisex deportivo', 10, 45000);
INSERT INTO Producto (id_categoria, id_imagen, nombre, cantidad, precio)
VALUES (10, 10, 'Cinta para cabello con perlas', 50, 5000);



CREATE OR REPLACE TRIGGER trg_detalle_compra_ai
BEFORE INSERT ON Detalle_Compra
FOR EACH ROW
DECLARE
    v_cantidad NUMBER;
BEGIN
    SELECT cantidad INTO v_cantidad
    FROM Producto
    WHERE id_producto = :NEW.id_producto
    FOR UPDATE;

    IF v_cantidad > 0 THEN
        UPDATE Producto
        SET cantidad = cantidad - 1
        WHERE id_producto = :NEW.id_producto;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'El producto no tiene stock disponible.');
    END IF;
    IF :NEW.fecha IS NULL THEN
        :NEW.fecha := SYSDATE;
    END IF;
END;
/

INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (1, 'ana@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (1, 'carlos@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (2, 'maria@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (2, 'jorge@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (3, 'sofia@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (3, 'pedro@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (4, 'lucia@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (4, 'andres@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (5, 'valeria@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (5, 'diego@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (6, 'ana@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (6, 'carlos@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (7, 'maria@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (8, 'jorge@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (8, 'sofia@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (9, 'pedro@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (9, 'lucia@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (10, 'andres@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (10, 'valeria@example.com');
INSERT INTO Detalle_Compra (id_producto, id_usuario) VALUES (10, 'diego@example.com');


SELECT
    p.id_producto,
    p.nombre AS producto,
    c.nombre AS categoria,
    COUNT(dc.id_compra) AS unidades_vendidas,
    SUM(p.precio) AS monto_total_ventas
FROM Detalle_Compra dc
    INNER JOIN Producto p ON dc.id_producto = p.id_producto
    INNER JOIN Categoria c ON p.id_categoria = c.id_categoria
WHERE TRUNC(dc.fecha, 'MM') = TO_DATE(:p_year || '-' || LPAD(:p_month,2,'0') || '-01','YYYY-MM-DD')
GROUP BY p.id_producto, p.nombre, c.nombre
ORDER BY unidades_vendidas DESC;


SELECT
    p.id_producto,
    p.nombre AS producto,
    c.nombre AS categoria,
    NVL(COUNT(dc.id_compra),0) AS unidades_vendidas,
    NVL(SUM(p.precio),0) AS monto_vendido
FROM Producto p
    LEFT JOIN Detalle_Compra dc
        ON p.id_producto = dc.id_producto
        AND TRUNC(dc.fecha, 'MM') = TO_DATE(:p_year || '-' || LPAD(:p_month,2,'0') || '-01','YYYY-MM-DD')
    LEFT JOIN Categoria c ON p.id_categoria = c.id_categoria
GROUP BY p.id_producto, p.nombre, c.nombre
ORDER BY unidades_vendidas DESC;

CREATE OR REPLACE PACKAGE pkg_consultas IS
  -- Devuelve monto total de ventas para año/mes
  FUNCTION monto_ventas_mes(p_year IN NUMBER, p_month IN NUMBER) RETURN NUMBER;

  -- Devuelve detalle por producto (INNER JOIN) en un ref cursor
  PROCEDURE reporte_detalle_articulos_vendidos(
    p_year IN NUMBER,
    p_month IN NUMBER,
    p_ref OUT SYS_REFCURSOR
  );

  -- Devuelve productos con y sin ventas en el mes (LEFT JOIN) en ref cursor
  PROCEDURE reporte_productos_con_y_sin_ventas(
    p_year IN NUMBER,
    p_month IN NUMBER,
    p_ref OUT SYS_REFCURSOR
  );
END pkg_consultas;
/
CREATE OR REPLACE PACKAGE BODY pkg_consultas IS

  FUNCTION monto_ventas_mes(p_year IN NUMBER, p_month IN NUMBER) RETURN NUMBER IS
    v_total NUMBER;
  BEGIN
    SELECT NVL(SUM(p.precio),0)
    INTO v_total
    FROM Detalle_Compra dc
      INNER JOIN Producto p ON dc.id_producto = p.id_producto
    WHERE TRUNC(dc.fecha,'MM') = TO_DATE(p_year || '-' || LPAD(p_month,2,'0') || '-01','YYYY-MM-DD');
    RETURN v_total;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
  END monto_ventas_mes;

  PROCEDURE reporte_detalle_articulos_vendidos(
    p_year IN NUMBER,
    p_month IN NUMBER,
    p_ref OUT SYS_REFCURSOR
  ) IS
  BEGIN
    OPEN p_ref FOR
      SELECT
        p.id_producto,
        p.nombre AS producto,
        c.nombre AS categoria,
        COUNT(dc.id_compra) AS unidades_vendidas,
        SUM(p.precio) AS monto_total_ventas
      FROM Detalle_Compra dc
        INNER JOIN Producto p ON dc.id_producto = p.id_producto
        INNER JOIN Categoria c ON p.id_categoria = c.id_categoria
      WHERE TRUNC(dc.fecha, 'MM') = TO_DATE(p_year || '-' || LPAD(p_month,2,'0') || '-01','YYYY-MM-DD')
      GROUP BY p.id_producto, p.nombre, c.nombre
      ORDER BY unidades_vendidas DESC;
  END reporte_detalle_articulos_vendidos;

  PROCEDURE reporte_productos_con_y_sin_ventas(
    p_year IN NUMBER,
    p_month IN NUMBER,
    p_ref OUT SYS_REFCURSOR
  ) IS
  BEGIN
    OPEN p_ref FOR
      SELECT
        p.id_producto,
        p.nombre AS producto,
        c.nombre AS categoria,
        NVL(COUNT(dc.id_compra),0) AS unidades_vendidas,
        NVL(SUM(p.precio),0) AS monto_vendido
      FROM Producto p
        LEFT JOIN Detalle_Compra dc
          ON p.id_producto = dc.id_producto
          AND TRUNC(dc.fecha, 'MM') = TO_DATE(p_year || '-' || LPAD(p_month,2,'0') || '-01','YYYY-MM-DD')
        LEFT JOIN Categoria c ON p.id_categoria = c.id_categoria
      GROUP BY p.id_producto, p.nombre, c.nombre
      ORDER BY unidades_vendidas DESC;
  END reporte_productos_con_y_sin_ventas;

END pkg_consultas;
/


CREATE OR REPLACE PACKAGE pkg_modificacion IS
  -- Procedimiento para realizar una compra
  PROCEDURE comprar_producto(p_id_producto IN NUMBER, p_email IN VARCHAR2);

  -- Función que devuelve el stock actual
  FUNCTION obtener_stock(p_id_producto IN NUMBER) RETURN NUMBER;
END pkg_modificacion;
/
CREATE OR REPLACE PACKAGE BODY pkg_modificacion IS

  FUNCTION obtener_stock(p_id_producto IN NUMBER) RETURN NUMBER IS
    v_stock NUMBER;
  BEGIN
    SELECT cantidad INTO v_stock
    FROM Producto
    WHERE id_producto = p_id_producto;
    RETURN v_stock;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END obtener_stock;

  PROCEDURE comprar_producto(p_id_producto IN NUMBER, p_email IN VARCHAR2) IS
  BEGIN
    INSERT INTO Detalle_Compra (id_producto, id_usuario)
    VALUES (p_id_producto, p_email);
  END comprar_producto;

END pkg_modificacion;
/



